{"version":3,"file":"static/development/pages/newCalEvent.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/CreateEvent.js","webpack:///./components/ErrorMessage.js","webpack:///./components/PleaseSignIn.js","webpack:///./components/Signin.js","webpack:///./components/User.js","webpack:///./components/globals/mutations/mutations.js","webpack:///./components/globals/queries/queries.js","webpack:///./components/styles/Form.js","webpack:///./config.js","webpack:///./lib/possibleStatus.js","webpack:///./pages/newCalEvent.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"date-fns\"","webpack:///external \"graphql-tag\"","webpack:///external \"next/link\"","webpack:///external \"next/router\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-adopt\"","webpack:///external \"react-apollo\"","webpack:///external \"react-spring\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React, { Component } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport {addMinutes, addHours} from 'date-fns';\nimport Link from 'next/link'\nimport { adopt } from 'react-adopt';\nimport { Spring } from 'react-spring';\nimport Router from 'next/router';\nimport { format } from 'date-fns';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport * as queries from './globals/queries/queries';\nimport * as mutations from './globals/mutations/mutations';\nimport {possibleStatus} from '../lib/possibleStatus';\n\n\n\nconst Composed = adopt({\n  allActsQuery: ({render}) => <Query query={queries.ALL_ACTS_QUERY}>{render}</Query>,\n  createEventWithNewActMutation: ({eventNewActUpdates, render}) => <Mutation variables={eventNewActUpdates} mutation={mutations.CREATE_EVENT_WITH_NEW_ACT_MUTATION} refetchQueries={[{ query: queries.ALL_EVENTS_QUERY }, { query: queries.ALL_ACTS_QUERY}]}>{render}</Mutation>,\n  createEventWithExistingActMutation: ({eventExistingActUpdates, render}) => <Mutation variables={eventExistingActUpdates} mutation={mutations.CREATE_EVENT_WITH_EXISTING_ACT_MUTATION} refetchQueries={[{ query: queries.ALL_EVENTS_QUERY }, { query: queries.ALL_ACTS_QUERY}]}>{render}</Mutation>,\n  spring: ({render}) => <Spring from={{ opacity: 0 }} to={{ opacity: 1 }}>{render}</Spring>,\n})\n\nclass CreateEvent extends Component {\n  state = {\n      duration: 45,\n      title: format(new Date(), \"MM-dd-YYYY\", {awareOfUnicodeTokens: true}),\n      status: 'CONFIRMED',\n      start: new Date(),\n      end: addMinutes(new Date(), 45),\n      allDay: false,\n      notes: [''],\n      name: '',\n      image: '',\n      largeImage: '',\n      email: '',\n      description: '',\n      actId: '',\n  }\n\n  componentDidMount() {\n    if (Router.query.start) {\n      const decodedStart = decodeURIComponent(Router.query.start);\n      const decodedEnd = decodeURIComponent(Router.query.end);\n      this.setState({\n        title: format(new Date(decodedStart), \"YYYY-MM-dd\", {awareOfUnicodeTokens: true}),\n        start: new Date(decodedStart),\n        end: new Date(decodedEnd),\n      })\n    };\n\n  }\n\n  handleChange = (e) => {\n    const { name, type, value } = e.target;\n    // console.log(type)\n    // console.log(value)\n\n    switch (name) {\n      case 'status':\n        return this.setState({status: value});\n      case 'select-existing-act':\n        return this.setState({ actId: value, name: '', email: '', description: '', image: '', largeImage: '' });\n      case 'notes':\n        const notes = [...this.state.notes];\n        const selectedIndex = parseInt(e.target.dataset.key);\n        notes[selectedIndex] = value;\n        return this.setState({ notes });\n    }\n\n    switch (type) {\n      case 'date':\n        const time = format(this.state.start, \"H:MM\", {awareOfUnicodeTokens: true});\n        let startDateTime = new Date(`${value} ${time}`);\n        const title = format(value, \"YYYY-MM-dd\", {awareOfUnicodeTokens: true});\n        let end = addMinutes(startDateTime, this.state.duration);\n        this.setState({ start: startDateTime, title, end });\n        break;\n      case 'time':\n        const date = format(this.state.start, \"YYYY-MM-dd\", {awareOfUnicodeTokens: true});\n        startDateTime = new Date(`${date} ${value}`);\n        end = addMinutes(startDateTime, this.state.duration);\n        this.setState({ start: startDateTime, end });\n        break;\n      case 'number':\n        const val = parseFloat(value);\n        this.setState({duration: val, end: addMinutes(this.state.start, val)})\n        break;\n      case 'checkbox':\n        this.setState({ allDay: !this.state.allDay })\n        break;\n      default: \n        this.setState({ [name]: value });\n    }\n  }\n    \n\n  \n  uploadFile = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'react-apollo-cal');\n    const res = await fetch('https://api.cloudinary.com/v1_1/dlskxwzm6/image/upload', {\n      method: 'POST',\n      body: data\n    });\n    const file = await res.json();\n    this.setState({\n      image: file.secure_url,\n      largeImage: file.eager[0].secure_url\n    })\n  }\n\n  addNoteField = (e) => {\n    e.preventDefault();\n    const notes = [...this.state.notes];\n    notes.push('');\n    this.setState({notes});\n  }\n\n  render() {\n    const dateFormat=\"yyyy-MM-dd\"\n    const timeFormat=\"H:mm\"\n    const notes = this.state.notes.map((note, index) => {\n      return <textarea id=\"notes\" key={index} data-key={index} name=\"notes\" placeholder=\"Enter A Note\" value={note} onChange={this.handleChange}/>\n    })\n    return (\n      <Composed \n        eventNewActUpdates={{title: this.state.title, status: this.state.status, start: this.state.start, end: this.state.end, allDay: this.state.allDay, notes: this.state.notes, name: this.state.name, image: this.state.image, largeImage: this.state.largeImage, email: this.state.email, description: this.state.description,}}\n        eventExistingActUpdates={{title: this.state.title,  status: this.state.status, start: this.state.start, end: this.state.end, allDay: this.state.allDay ,notes: this.state.notes, actId: this.state.actId}}\n      >\n        {({allActsQuery, createEventWithNewActMutation, createEventWithExistingActMutation, spring}) => {\n          if (allActsQuery.loading) return <p>Loading...</p>;\n            return (\n              <div style={spring}>\n                <Form onSubmit={ async (e) => {\n                  e.preventDefault();\n                  const res = !this.state.actId ? await createEventWithNewActMutation() : await createEventWithExistingActMutation();\n                  Router.push({\n                    pathname: '/'\n                  })\n                }}>\n                  <Error error={allActsQuery.error} />\n                  <fieldset disabled={allActsQuery.loading} aria-busy={allActsQuery.loading}>\n                    <label htmlFor=\"date\">\n                      Date\n                      <input type=\"date\" id=\"date\" name=\"date\" placeholder=\"Date\" value={format(this.state.start, dateFormat, {awareOfUnicodeTokens: true})} onChange={this.handleChange}/>\n                    </label>\n              \n                    <label htmlFor=\"time\">\n                      Time\n                      <input type=\"time\" id=\"time\" name=\"time\" placeholder={format(addHours(new Date(this.state.start), 20), timeFormat)} value={format(this.state.start, timeFormat, {awareOfUnicodeTokens: true})} onChange={this.handleChange}/>\n                    </label>\n              \n                    <label htmlFor=\"duration\">\n                      Duration (minutes)\n                      <input type=\"number\" id=\"duration\" name=\"duration\" placeholder=\"45\" value={this.state.duration} onChange={this.handleChange} />\n                    </label>\n              \n                    <label htmlFor=\"status\">\n                      Status\n                      <select name=\"status\" defaultValue={this.state.status} onChange={this.handleChange}>\n                        { possibleStatus.map(status => <option key={status} value={status}>{status}</option>) }\n                      </select>\n                    </label>\n              \n                    <label>\n                      All Day\n                      <input type=\"checkbox\" id=\"allday\" name=\"allday\" checked={this.state.allDay} onChange={this.handleChange} />\n                    </label>\n              \n                    <label htmlFor=\"notes\">\n                      Notes\n                      {notes}\n                      <button onClick={this.addNoteField}>&#43;</button>\n                    </label>\n                  </fieldset>\n              \n                  <fieldset>\n                    <label htmlFor=\"acts\">\n                      Select An Act Already In The Database\n                      <select name=\"select-existing-act\" defaultValue=\"\" onChange={this.handleChange}>\n                        <option value=\"\" disabled>Acts</option>\n                        {\n                          allActsQuery.data.acts.map(act => <option key={act.id} value={act.id}>{act.name}</option>)\n                        }\n                      </select>\n                    </label>\n                    <hr />\n                  </fieldset>\n                      \n                  <fieldset>\n                    <h4>Or Create A New Act</h4>\n                    <hr />\n                    <label htmlFor=\"name\">\n                      Name\n                      <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" disabled={!!this.state.actId} required={!this.state.actId} value={this.state.name} onChange={this.handleChange}/>\n                    </label>\n                      \n                    <label htmlFor=\"description\">\n                      Description\n                      <textarea id=\"description\" name=\"description\" placeholder=\"Enter A Description\" disabled={!!this.state.actId} required={!this.state.actId} value={this.state.description} onChange={this.handleChange}/>\n                    </label>\n                      \n                    <label htmlFor=\"email\">\n                      Email\n                      <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"email\" disabled={!!this.state.actId} required={!this.state.actId} value={this.state.email} onChange={this.handleChange}/>\n                    </label>\n                      \n                    <label htmlFor=\"file\">\n                      Image\n                      <input type=\"file\" id=\"file\" name=\"file\" disabled={!!this.state.actId} placeholder=\"Upload an image\" onChange={this.uploadFile}/>\n                      {this.state.image && <img src={this.state.image} alt=\"Upload Preview\" width=\"200\"/>}\n                    </label>\n                      \n                    <button type=\"submit\">Submit</button>\n                  </fieldset>\n                  </Form> \n                </div>     \n          )\n        }}\n      </Composed>\n    );\n  }\n}\n\nexport default CreateEvent;","import styled from 'styled-components';\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 100;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Shoot!</strong>\n          {error.message.replace('GraphQL error: ', '')}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace('GraphQL error: ', '')}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {},\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object,\n};\n\nexport default DisplayError;\n","import { Query } from 'react-apollo';\nimport { CURRENT_USER_QUERY } from './User';\nimport Signin from './Signin';\n\nconst PleaseSignIn = (props) => (\n  <Query query={CURRENT_USER_QUERY}>\n    {({ data, loading }) => {\n      if (loading) return <p>Loading...</p>\n      if (!data.me) {\n        return <div>\n          <p>Please Sign In Before Continuing</p>\n          <Signin />\n        </div>\n      }\n      return props.children;\n    }}\n  </Query>\n);\n\nexport default PleaseSignIn;","import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport { CURRENT_USER_QUERY } from './User';\n\nconst SIGNIN_MUTATION = gql`\n  mutation SIGNIN_MUTATION($email: String!, $password: String!) {\n    signin(email: $email, password: $password ) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nclass Signin extends Component {\n  state = {\n    name: '',\n    password: '',\n    email: '',\n  }\n\n  saveToState = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <Mutation mutation={SIGNIN_MUTATION} variables={this.state} refetchQueries={[{ query: CURRENT_USER_QUERY }]}>\n        {( signup, { error, loading }) => {\n          return (\n            <Form method=\"post\" onSubmit={ async (e) => {\n              e.preventDefault();\n              await signup();\n              this.setState({name: '', password: '', email: ''})\n            }}>\n              <fieldset disabled={loading} aria-busy={loading}>\n                <h2>Sign In</h2>\n                  <Error error={error} />\n                  <label htmlFor=\"email\">\n                    Email\n                    <input type=\"email\" name=\"email\" placeholder=\"email\" value={this.state.email} onChange={this.saveToState}/>\n                  </label>\n                  <label htmlFor=\"password\">\n                    Password\n                    <input type=\"password\" name=\"password\" placeholder=\"password\" value={this.state.password} onChange={this.saveToState}/>\n                  </label>\n                  <button type=\"submit\">Sign In</button>\n              </fieldset>\n            </Form>\n          )\n        }}\n      </Mutation>\n    );\n  }\n}\n\nexport default Signin;","import { Query } from 'react-apollo'\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\n\nconst CURRENT_USER_QUERY = gql`\n  query {\n    me{\n      id\n      email\n      name\n      permissions\n    }\n  }\n`;\n\nconst User = props => (\n  <Query {...props} query={CURRENT_USER_QUERY}>\n    {payload => props.children(payload)}\n  </Query>\n)\n\nUser.propTypes = {\n  children: PropTypes.func.isRequired,\n}\n\nexport default User;\nexport { CURRENT_USER_QUERY };","import gql from 'graphql-tag';\n\n\nexport const TOGGLE_MODAL_MUTATION = gql`\n  mutation {\n    toggleModal @client\n  }\n`;\n\nexport const UPDATE_EVENT_MUTATION = gql`\n  mutation UPDATE_EVENT_MUTATION(\n      $id: ID!\n      $title: String\n      $status: EventStatus\n      $start: DateTime\n      $end: DateTime\n      $allDay: Boolean\n      $notes: [String!]\n      $draw: Int\n      $name: String\n      $description: String\n      $email: String\n      $image: String\n      $largeImage: String\n      $actId: String\n      $newActId: String\n  ) {\n    updateEvent(\n      id: $id\n      title: $title\n      status: $status\n      start: $start\n      end: $end\n      allDay: $allDay\n      notes: $notes\n      draw: $draw\n      name: $name\n      description: $description\n      email: $email\n      image: $image\n      largeImage: $largeImage\n      actId: $actId\n      newActId: $newActId\n    ) {\n      id\n      start\n      notes\n      draw\n      act {\n        id\n        name\n        description\n        email\n        image\n        largeImage\n      }\n    }\n  }\n`;\n\n\nexport const MOVE_EVENT_MUTATION = gql`\n  mutation MOVE_EVENT_MUTATION($id: ID!, $start: DateTime, $end: DateTime, $allDay: Boolean) {\n    moveEvent(id: $id, start: $start, end: $end, allDay: $allDay) {\n      id\n      start\n      end\n    }\n  }\n`;\n\nexport const CREATE_EVENT_WITH_NEW_ACT_MUTATION = gql`\n  mutation CREATE_EVENT_WITH_NEW_ACT_MUTATION(\n      $title: String!\n      $status: EventStatus!\n      $start: DateTime!\n      $end: DateTime!\n      $allDay: Boolean!\n      $notes: [String!]\n      $name: String\n      $email: String\n      $description: String\n      $image: String\n      $largeImage: String\n      $actId: String\n  ) {\n    createEventWithNewAct( \n        title: $title\n        status: $status\n        start: $start\n        end: $end\n        allDay: $allDay\n        notes: $notes\n        name: $name\n        email: $email\n        description: $description\n        image: $image\n        largeImage: $largeImage\n        actId: $actId\n    ) \n    { \n      id\n      act {\n        id\n      }\n    }\n  }\n`;\n\n\nexport const CREATE_EVENT_WITH_EXISTING_ACT_MUTATION = gql`\n  mutation CREATE_EVENT_WITH_EXISTING_ACT_MUTATION(\n    $title: String\n    $status: EventStatus!\n    $start: DateTime!\n    $end: DateTime!\n    $allDay: Boolean!\n    $notes: [String!]\n    $actId: String\n  ){\n    createEventWithExistingAct(\n      title: $title\n      status: $status\n      start: $start\n      end: $end\n      allDay: $allDay\n      notes: $notes\n      actId: $actId\n    ){\n      id\n      act {\n        id\n      }\n    }\n  }\n`;\n\nexport const CREATE_ACT_MUTATION = gql`\n  mutation CREATE_ACT_MUTATION(\n      $name: String!\n      $description: String\n      $image: String\n      $largeImage: String\n      $email: String\n      $notes: [String!]\n  ) {\n    createAct(\n      name: $name\n      description: $description\n      image: $image\n      largeImage: $largeImage\n      email: $email\n      notes: $notes\n    ) {\n      id\n    }\n  }\n`;","import gql from 'graphql-tag';\nimport {perPage} from '../../../config';\n\n export const ALL_EVENTS_QUERY = gql`\n  query ALL_EVENTS_QUERY {\n    events {\n      id\n      title\n      status\n      start\n      end\n      allDay\n      notes\n      draw\n      act {\n        id\n        name\n        description\n        notes\n        image\n      }\n    }\n  }\n`;\n\nexport const SINGLE_EVENT_QUERY = gql`\n  query SINGLE_EVENT_QUERY($id: ID!) {\n    event(where: {id: $id}) {\n      id\n      title\n      status\n      start\n      end\n      allDay\n      notes\n      draw\n      act {\n        id\n        name\n        description\n        email\n        image\n        largeImage\n      }\n    }\n  }\n`;\n\nexport const ALL_ACTS_QUERY = gql`\n  query ALL_ACTS_QUERY {\n    acts {\n      id\n      name\n      description\n      image\n      largeImage\n      email\n      notes\n      event{\n        id\n        title\n        draw\n      }\n    }\n  }\n`;\n\nexport const ALL_ACTS_QUERY_PAGINATION = gql`\n  query ALL_ACTS_QUERY($skip: Int=0, $first: Int=${perPage}) {\n    acts(first: $first, skip: $skip, orderBy: name_ASC) {\n      id\n      name\n      description\n      image\n      largeImage\n      email\n      notes\n      event{\n        id\n        title\n        draw\n      }\n    }\n  }\n`;\n\nexport const LOCAL_STATE_QUERY = gql`\n  query {\n    modalOpen @client\n  }\n`;\n\nexport const PAGINATION_QUERY = gql`\n  query PAGINATION_QUERY{\n    actsConnection {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nexport const SEARCH_ACTS_QUERY = gql`\n  query SEARCH_ACTS_QUERY($searchTerm: String!) {\n    acts(where: {\n      OR: [\n        {name_contains: $searchTerm},\n        {description_contains: $searchTerm},\n      ] }) \n      {\n        id \n        name\n        image\n        event{\n          id\n          start\n        }\n      }\n  }\n`;\n\n\nexport const SINGLE_ACT_QUERY = gql`\n  query SINGLE_ACT_QUERY($id: ID!) {\n    act(where: { id: $id }) {\n      id\n      name\n      description\n      image\n      email\n      notes\n      event{\n        id\n        start\n        allDay\n        draw\n      }\n    }\n  }\n`;\n\n","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05);\n  background: rgba(0, 0, 0, 0.02);\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.5rem;\n  line-height: 1.5;\n  font-weight: 600;\n  label {\n    display: block;\n    margin-bottom: 1rem;\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 0.5rem;\n    font-size: 1rem;\n    border: 1px solid black;\n    &:focus {\n      outline: 0;\n      border-color: ${props => props.theme.mainColor};\n    }\n  }\n  input[type='submit'] {\n    width: auto;\n    background: ${props => props.theme.mainColor};\n    color: white;\n    border: 0;\n    font-size: 2rem;\n    font-weight: 600;\n    padding: 0.5rem 1.0rem;\n  }\n  fieldset {\n    border: 0;\n    padding: 0;\n\n    &[disabled] {\n      opacity: 0.5;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%);\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n\n\n\n\n`;\n\nexport default Form;\n","// This is client side config only - don't put anything in here that shouldn't be public!\nexport const endpoint = `http://localhost:4444`;\nexport const perPage = 16;\n","export const possibleStatus = [\n  'CONFIRMED',\n  'HELD',\n  'CANCELLED',\n];","import CreateEvent from '../components/CreateEvent';\nimport PleaseSignIn from '../components/PleaseSignIn';\n\nconst NewCalEvent = () => (\n  <div>\n    <PleaseSignIn>\n      <CreateEvent />\n    </PleaseSignIn>\n  </div>\n);\n\nexport default NewCalEvent;","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"date-fns\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"next/link\");","module.exports = require(\"next/router\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-adopt\");","module.exports = require(\"react-apollo\");","module.exports = require(\"react-spring\");","module.exports = require(\"styled-components\");"],"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","sourceRoot":""}