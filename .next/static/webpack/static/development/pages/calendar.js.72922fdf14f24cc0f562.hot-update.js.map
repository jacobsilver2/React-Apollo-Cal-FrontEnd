{"version":3,"file":"static/webpack/static/development/pages/calendar.js.72922fdf14f24cc0f562.hot-update.js","sources":["webpack:///./components/Calendar.js"],"sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport dateFns from 'date-fns';\nimport getMilliseconds from 'date-fns/getMilliseconds'\n// import getMilliseconds from 'date-fns/get_milliseconds'\n\n\nclass Calendar extends Component {\n  state = { \n    currentMonth: new Date(),\n    selectedDate: new Date(),\n  };\n\n  renderHeader =() => {\n    const dateFormat = 'MMMM YYYY';\n    return (\n        <div className='header row flex-middle'>\n           <div className='col col-start'>\n               <div className='icon' onClick={this.prevMonth}>\n                   chevron_left\n               </div>\n           </div>\n           <div className='col col-center'>\n               <span>\n                   {/* {dateFns.format(this.state.currentMonth, dateFormat)} */}\n               </span>\n           </div>\n           <div className='col col-end' onClick={this.nextMonth}>\n               <div className=\"icon\">chevron_right</div>\n           </div>\n        </div>\n    )\n  }\n\nrenderDays = () => {\n  const dateFormat = 'dddd';\n  const days = [];\n  let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n  for (let i=0; i<7; i++) {\n      days.push(\n          <div className='col col-center' key={i}>\n             {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n          </div>\n      );\n  }\n  return <div className=\"days row\">{days}</div>\n}\n\nrenderCells = () => {\n  const { currentMonth, selectedDate } = this.state;\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart);\n  const startDate = dateFns.startOfWeek(monthStart);\n  const endDate = dateFns.endOfWeek(monthEnd);\n\n  const dateFormat = \"D\";\n  const rows = [];\n\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n \n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, dateFormat);\n      const cloneDay = day;\n\n      // debugger;\n      days.push(\n        <div\n          className={`col cell ${\n            !dateFns.isSameMonth(day, monthStart)\n              ? \"disabled\"\n              : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\n          }`}\n          key={day.toString()}\n        >\n          <span className=\"number\">{formattedDate}</span>\n          <span className=\"bg\">{formattedDate}</span>\n        </div>\n      );\n      day = dateFns.addDays(day, 1);\n  }\n  \n  rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    );\n    days = [];\n  }\n  return <div className=\"body\">{rows}</div>;\n}\n\nnextMonth = () => {\n  this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n  })\n}\n\nprevMonth = () => {\n  this.setState({currentMonth: dateFns.subMonths(this.state.currentMonth, 1)})\n}\n\n\n  render() {\n    return (\n      <div className='calendar'>\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nexport default Calendar;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA5GA;AACA;AA8GA;;;;A","sourceRoot":""}