{"version":3,"file":"static/webpack/static/development/pages/newCalEvent.js.3f2e6e56446c87837802.hot-update.js","sources":["webpack:///./components/CreateEvent.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport {addMinutes, addHours} from 'date-fns';\nimport Link from 'next/link'\nimport { adopt } from 'react-adopt';\nimport { Spring } from 'react-spring';\nimport Router from 'next/router';\nimport { format } from 'date-fns';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport * as queries from './globals/queries/queries';\nimport * as mutations from './globals/mutations/mutations';\nimport {possibleStatus} from '../lib/possibleStatus';\n\n\n\nconst Composed = adopt({\n  allActsQuery: ({render}) => <Query query={queries.ALL_ACTS_QUERY}>{render}</Query>,\n  createEventWithNewActMutation: ({eventNewActUpdates, render}) => <Mutation variables={eventNewActUpdates} mutation={mutations.CREATE_EVENT_WITH_NEW_ACT_MUTATION} refetchQueries={[{ query: queries.ALL_EVENTS_QUERY }, { query: queries.ALL_ACTS_QUERY}]}>{render}</Mutation>,\n  createEventWithExistingActMutation: ({eventExistingActUpdates, render}) => <Mutation variables={eventExistingActUpdates} mutation={mutations.CREATE_EVENT_WITH_EXISTING_ACT_MUTATION} refetchQueries={[{ query: queries.ALL_EVENTS_QUERY }, { query: queries.ALL_ACTS_QUERY}]}>{render}</Mutation>,\n  spring: ({render}) => <Spring from={{ opacity: 0 }} to={{ opacity: 1 }}>{render}</Spring>,\n})\n\nclass CreateEvent extends Component {\n  state = {\n      duration: 45,\n      title: format(new Date(), \"MM-dd-YYYY\", {awareOfUnicodeTokens: true}),\n      status: 'CONFIRMED',\n      start: new Date(),\n      end: addMinutes(new Date(), 45),\n      allDay: false,\n      notes: [''],\n      name: '',\n      image: '',\n      largeImage: '',\n      email: '',\n      description: '',\n      actId: '',\n  }\n\n  componentDidMount() {\n    if (Router.query.start) {\n      const decodedStart = decodeURIComponent(Router.query.start);\n      const decodedEnd = decodeURIComponent(Router.query.end);\n      this.setState({\n        title: format(new Date(decodedStart), \"YYYY-MM-dd\", {awareOfUnicodeTokens: true}),\n        start: new Date(decodedStart),\n        end: new Date(decodedEnd),\n      })\n    };\n\n  }\n\n  handleChange = (e) => {\n    const { name, type, value } = e.target;\n    // console.log(type)\n    // console.log(value)\n\n    switch (name) {\n      case 'status':\n        return this.setState({status: value});\n      case 'select-existing-act':\n        return this.setState({ actId: value, name: '', email: '', description: '', image: '', largeImage: '' });\n      case 'notes':\n        const notes = [...this.state.notes];\n        const selectedIndex = parseInt(e.target.dataset.key);\n        notes[selectedIndex] = value;\n        return this.setState({ notes });\n    }\n\n    switch (type) {\n      case 'date':\n        const time = format(this.state.start, \"H:MM\", {awareOfUnicodeTokens: true});\n        let startDateTime = new Date(`${value} ${time}`);\n        const title = format(value, \"YYYY-MM-dd\", {awareOfUnicodeTokens: true});\n        let end = addMinutes(startDateTime, this.state.duration);\n        this.setState({ start: startDateTime, title, end });\n        break;\n      case 'time':\n        const date = format(this.state.start, \"YYYY-MM-dd\", {awareOfUnicodeTokens: true});\n        startDateTime = new Date(`${date} ${value}`);\n        end = addMinutes(startDateTime, this.state.duration);\n        this.setState({ start: startDateTime, end });\n        break;\n      case 'number':\n        const val = parseFloat(value);\n        this.setState({duration: val, end: addMinutes(this.state.start, val)})\n        break;\n      case 'checkbox':\n        this.setState({ allDay: !this.state.allDay })\n        break;\n      default: \n        this.setState({ [name]: value });\n    }\n  }\n    \n\n  \n  uploadFile = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'react-apollo-cal');\n    const res = await fetch('https://api.cloudinary.com/v1_1/dlskxwzm6/image/upload', {\n      method: 'POST',\n      body: data\n    });\n    const file = await res.json();\n    this.setState({\n      image: file.secure_url,\n      largeImage: file.eager[0].secure_url\n    })\n  }\n\n  addNoteField = (e) => {\n    e.preventDefault();\n    const notes = [...this.state.notes];\n    notes.push('');\n    this.setState({notes});\n  }\n\n  render() {\n    const dateFormat=\"yyyy-MM-dd\"\n    const timeFormat=\"H:mm\"\n    const notes = this.state.notes.map((note, index) => {\n      return <textarea id=\"notes\" key={index} data-key={index} name=\"notes\" placeholder=\"Enter A Note\" value={note} onChange={this.handleChange}/>\n    })\n    return (\n      <Composed \n        eventNewActUpdates={{title: this.state.title, status: this.state.status, start: this.state.start, end: this.state.end, allDay: this.state.allDay, notes: this.state.notes, name: this.state.name, image: this.state.image, largeImage: this.state.largeImage, email: this.state.email, description: this.state.description,}}\n        eventExistingActUpdates={{title: this.state.title,  status: this.state.status, start: this.state.start, end: this.state.end, allDay: this.state.allDay ,notes: this.state.notes, actId: this.state.actId}}\n      >\n        {({allActsQuery, createEventWithNewActMutation, createEventWithExistingActMutation, spring}) => {\n          if (allActsQuery.loading) return <p>Loading...</p>;\n            return (\n              <div style={spring}>\n              <Form onSubmit={ async (e) => {\n                e.preventDefault();\n                const res = !this.state.actId ? await createEventWithNewActMutation() : await createEventWithExistingActMutation();\n                Router.push({\n                  pathname: '/'\n                })\n              }}>\n                <Error error={allActsQuery.error} />\n                <div></div>\n                <fieldset disabled={allActsQuery.loading} aria-busy={allActsQuery.loading}>\n                  <label htmlFor=\"date\">\n                    Date\n                    <input type=\"date\" id=\"date\" name=\"date\" placeholder=\"Date\" value={format(this.state.start, dateFormat, {awareOfUnicodeTokens: true})} onChange={this.handleChange}/>\n                  </label>\n\n                  <label htmlFor=\"time\">\n                    Time\n                    <input type=\"time\" id=\"time\" name=\"time\" placeholder={format(addHours(new Date(this.state.start), 20), timeFormat)} value={format(this.state.start, timeFormat, {awareOfUnicodeTokens: true})} onChange={this.handleChange}/>\n                  </label>\n\n                  <label htmlFor=\"duration\">\n                    Duration (minutes)\n                    <input type=\"number\" id=\"duration\" name=\"duration\" placeholder=\"45\" value={this.state.duration} onChange={this.handleChange} />\n                  </label>\n\n                  <label htmlFor=\"status\">\n                    Status\n                    <select name=\"status\" defaultValue={this.state.status} onChange={this.handleChange}>\n                      { possibleStatus.map(status => <option key={status} value={status}>{status}</option>) }\n                    </select>\n                  </label>\n\n                  <label>\n                    All Day\n                    <input type=\"checkbox\" id=\"allday\" name=\"allday\" checked={this.state.allDay} onChange={this.handleChange} />\n                  </label>\n\n                  <label htmlFor=\"notes\">\n                    Notes\n                    {notes}\n                    <button onClick={this.addNoteField}>&#43;</button>\n                  </label>\n\n                  <label htmlFor=\"acts\">\n                    Select An Act Already In The Database\n                    <select name=\"select-existing-act\" defaultValue=\"\" onChange={this.handleChange}>\n                      <option value=\"\" disabled>Acts</option>\n                      {\n                        allActsQuery.data.acts.map(act => <option key={act.id} value={act.id}>{act.name}</option>)\n                      }\n                    </select>\n                  </label>\n                  <hr />\n                  <h4>Or Create A New Act</h4>\n                  <hr />\n                  <label htmlFor=\"name\">\n                    Name\n                    <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" disabled={!!this.state.actId} required={!this.state.actId} value={this.state.name} onChange={this.handleChange}/>\n                  </label>\n\n                  <label htmlFor=\"description\">\n                    Description\n                    <textarea id=\"description\" name=\"description\" placeholder=\"Enter A Description\" disabled={!!this.state.actId} required={!this.state.actId} value={this.state.description} onChange={this.handleChange}/>\n                  </label>\n\n                  <label htmlFor=\"email\">\n                    Email\n                    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"email\" disabled={!!this.state.actId} required={!this.state.actId} value={this.state.email} onChange={this.handleChange}/>\n                  </label>\n\n                  <label htmlFor=\"file\">\n                    Image\n                    <input type=\"file\" id=\"file\" name=\"file\" disabled={!!this.state.actId} placeholder=\"Upload an image\" onChange={this.uploadFile}/>\n                    {this.state.image && <img src={this.state.image} alt=\"Upload Preview\" width=\"200\"/>}\n                  </label>\n\n                  <button type=\"submit\">Submit</button>\n                  </fieldset>\n                </Form> \n                </div>     \n          )\n        }}\n      </Composed>\n    );\n  }\n}\n\nexport default CreateEvent;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AAMA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AATA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAvBA;AAwBA;AACA;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AAKA;AALA;AAAA;AACA;AADA;AASA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAeA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAhFA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAEA;;;AAsrMA;AACA;AAuMA;;;;A","sourceRoot":""}