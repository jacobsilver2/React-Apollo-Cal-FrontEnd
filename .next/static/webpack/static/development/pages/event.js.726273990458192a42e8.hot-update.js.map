{"version":3,"file":"static/webpack/static/development/pages/event.js.726273990458192a42e8.hot-update.js","sources":["webpack:///./components/ErrorMessage.js","webpack:///./components/SingleEvent.js","webpack:///./components/UpdateEvent.js","webpack:///./components/styles/Form.js"],"sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 100;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Shoot!</strong>\n          {error.message.replace('GraphQL error: ', '')}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace('GraphQL error: ', '')}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {},\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object,\n};\n\nexport default DisplayError;\n","import React, { Component } from 'react';\nimport { Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {SINGLE_EVENT_QUERY} from './UpdateEvent';\nimport ItemStyles from './styles/ItemStyles';\nimport Title from './styles/Title';\n\n\n\n\nclass SingleEvent extends Component {\n  render() {\n    return (\n        <Query query={SINGLE_EVENT_QUERY} variables={{id: this.props.id}}>\n          {({data, loading}) => {\n            if (loading) return <p>Loading</p>\n            if (!data.event) return <p>No Item Found for ID {this.props.id}</p>\n            return (\n              <ItemStyles>\n                { data.event.image && <img src={data.event.image} alt={data.event.title}/> }\n                <Title>{data.event.title}</Title>\n                <p>{data.event.date}</p>\n              </ItemStyles>\n            )\n          }}\n        </Query>\n    );\n  }\n}\n\nexport default SingleEvent;","import React, { Component } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\n\nconst SINGLE_EVENT_QUERY = gql`\n  query SINGLE_EVENT_QUERY($id: ID!) {\n    event(where: {id: $id}) {\n      id\n      title\n      description\n      date\n    }\n  }\n`;\n\n\n\nconst UPDATE_EVENT_MUTATION = gql`\n  mutation UPDATE_EVENT_MUTATION(\n      $id: ID!\n      $title: String\n      $description: String\n      $image: String\n      $largeImage: String\n      $date: DateTime\n  ) {\n    updateEvent(\n      id: $id\n      title: $title\n      description: $description\n      image: $image\n      largeImage: $largeImage\n      date: $date\n    ) {\n      id\n    }\n  }\n`;\n\nclass UpdateEvent extends Component {\n  state = {}\n\n  handleChange = (e) => {\n    const { name, type, value } = e.target;\n    const val = type === 'number' ? parseFloat(value) : value;\n    this.setState({\n      [name]: val\n    })\n  }\n\n\n  render() {\n    return (\n      <Query query={SINGLE_EVENT_QUERY} variables={this.props.id}>\n        {({data, loading}) => {\n          if (loading) return <p>Loading...</p>\n          return (\n            <Mutation mutation={UPDATE_EVENT_MUTATION} variables={this.state}>\n              {(updateEvent, { loading, error, called, data }) => (\n                <Form onSubmit={ async (e) => {\n                  e.preventDefault();\n                  const res = await updateEvent();\n                  Router.push({\n                    pathname: '/'\n                  })\n                }}>\n                  <Error error={error} />\n              \n                  <fieldset disabled={loading} aria-busy={loading}>\n\n                    <label htmlFor=\"title\">\n                      Title\n                      <input type=\"text\" id=\"title\" name=\"title\" placeholder=\"Title\" required defaultValue={data.event.title} onChange={this.handleChange}/>\n                    </label>\n              \n                    <label htmlFor=\"date\">\n                      Date\n                      <input type=\"date\" id=\"date\" name=\"date\" placeholder=\"Date\" required defaultValue={data.event.date} onChange={this.handleChange}/>\n                    </label>\n              \n                    <label htmlFor=\"description\">\n                      Description\n                      <textarea id=\"description\" name=\"description\" placeholder=\"Enter A Description\" required defaultValue={data.event.description} onChange={this.handleChange}/>\n                    </label>\n              \n                    <button type=\"submit\">Save Changes</button>\n                  </fieldset>\n                </Form>      \n              )}\n            </Mutation>\n          )\n        }}\n      </Query>\n    );\n  }\n}\n\nexport { UPDATE_EVENT_MUTATION, SINGLE_EVENT_QUERY };\nexport default UpdateEvent;","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05);\n  background: rgba(0, 0, 0, 0.02);\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.5rem;\n  line-height: 1.5;\n  font-weight: 600;\n  label {\n    display: block;\n    margin-bottom: 1rem;\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 0.5rem;\n    font-size: 1rem;\n    border: 1px solid black;\n    &:focus {\n      outline: 0;\n      border-color: ${props => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: red;\n    color: white;\n    border: 0;\n    font-size: 2rem;\n    font-weight: 600;\n    padding: 0.5rem 1.2rem;\n  }\n  fieldset {\n    border: 0;\n    padding: 0;\n\n    &[disabled] {\n      opacity: 0.5;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%);\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;;;;AAjBA;AACA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAqBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AAiCA;AAGA;;;;AAvDA;AACA;AAyDA;AACA;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAEA;AAYA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAiCA;;;;A","sourceRoot":""}