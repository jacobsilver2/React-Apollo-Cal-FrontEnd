{"version":3,"file":"static/webpack/static/development/pages/_app.js.f72edf6867a99461d4ba.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Downshift, {resetIdCounter} from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_EVENTS_QUERY = gql`\n  query SEARCH_EVENTS_QUERY($searchTerm: String!) {\n    events(where: {\n      OR: [\n        {title_contains: $searchTerm},\n        {description_contains: $searchTerm},\n      ] }) \n      {\n        id \n        image\n        title\n      }\n  }\n`;\n\nfunction routeToEvent(event) {\n  console.log(event);\n  Router.push({\n    pathname: '/event',\n    query: {\n      id: event.id\n    }\n  })\n}\n\nclass Autocomplete extends Component {\n  state = {\n    events: [],\n    loading: false,\n\n  }\n  onChange = debounce(async (e, client) => {\n    // turn loading on\n    this.setState({ loading: true });\n    const res = await client.query({\n      query: SEARCH_EVENTS_QUERY,\n      variables: {searchTerm: e.target.value}\n    });\n    this.setState({ events: res.data.events, loading: false });\n  }, 350);\n\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n      <Downshift onChange={routeToEvent} itemToString={item => (item === null ? '' : item.title)} >\n        {({getInputProps, getItemProps, isOpen, inputValue, highlightedIndex}) => (\n          <div>\n            <ApolloConsumer>\n              {(client) => (\n                <input \n                  {...getInputProps({\n                    type: \"search\",\n                    placeholder: 'search for an event',\n                    id: 'search',\n                    className: this.state.loading ? 'loading' : '',\n                    onChange: e => {\n                    e.persist();\n                    this.onChange(e, client);\n                  },\n                  })}\n                />\n              )}\n            </ApolloConsumer>\n            { isOpen && (\n              <DropDown>\n                {this.state.events.map((item, index) => \n                  <DropDownItem \n                    {...getItemProps({ item }) } \n                    key={item.id}\n                    highlighted={index === highlightedIndex} \n                  >\n                  <img width=\"50\" src={item.image} alt={item.title}/>\n                  {item.title}\n                </DropDownItem>)}\n                {!this.state.events.length && !this.state.loading && (\n                  <DropDownItem>Nothing Found for {inputValue}</DropDownItem>\n                )}\n              </DropDown>\n            )}\n          </div>\n        )}\n      </Downshift>\n      </SearchStyles>    \n    );\n  }\n}\n\nexport default Autocomplete;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AACA;AAJA;AAGA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AASA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9BA;AAuCA;;;;AA5DA;AACA;AA8DA;;;;A","sourceRoot":""}