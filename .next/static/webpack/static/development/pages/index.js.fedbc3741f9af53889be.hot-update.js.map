{"version":3,"file":"static/webpack/static/development/pages/index.js.fedbc3741f9af53889be.hot-update.js","sources":["webpack:///./components/Calendar.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {format, addDays, addMonths, subMonths, startOfWeek, endOfWeek, startOfMonth, endOfMonth, getMilliseconds, isSameDay, isSameMonth} from 'date-fns';\nimport {StyledCal} from './styles/CalendarStyles';\n\nconst ALL_EVENTS_QUERY = gql`\n  query ALL_EVENTS_QUERY {\n    events {\n      id\n      title\n      description\n      image\n      largeImage\n      date\n    }\n  }\n`;\n\nclass Calendar extends Component {\n  state = { \n    currentMonth: new Date(),\n    selectedDate: new Date(),\n  };\n\n  renderHeader = () => {\n    const dateFormat = 'MMMM YYYY';\n    return (\n      <div className='header row flex-middle'>\n         <div className='col col-start'>\n             <div className='icon' onClick={this.prevMonth}>\n                 chevron_left\n             </div>\n         </div>\n         <div className='col col-center'>\n             <span>\n                 {format(this.state.currentMonth, dateFormat, { awareOfUnicodeTokens: true })}\n             </span>\n         </div>\n         <div className='col col-end' onClick={this.nextMonth}>\n             <div className=\"icon\">\n                chevron_right\n             </div>\n         </div>\n      </div>\n    )\n  }\n\n  renderDays = () => {\n    const dateFormat = 'EEEE';\n    const days = [];\n    let startDate = startOfWeek(this.state.currentMonth);\n\n    for (let i=0; i<7; i++) {\n        days.push(\n            <div className='col col-center' key={i}>\n               {format(addDays(startDate, i), dateFormat, {awareOfUnicodeTokens: true})}\n            </div>\n        );\n    }\n    return <div className=\"days row\">{days}</div>\n  }\n\n  renderCells = () => {\n    const { currentMonth, selectedDate } = this.state;\n    const monthStart = startOfMonth(currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n  \n    const dateFormat = \"d\";\n    const rows = [];\n  \n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n    \n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat, { awareOfUnicodeTokens: true });\n        const cloneDay = day;\n      \n        // debugger;\n        days.push(\n          <div\n            className={`col cell ${\n              !isSameMonth(day, monthStart)\n                ? \"disabled\"\n                : isSameDay(day, selectedDate) ? \"selected\" : \"\"\n            }`}\n            key={day.toString()}\n          >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n          </div>\n        );\n        day = addDays(day, 1);\n    }\n  \n    rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return  <div className=\"body\">{rows}</div>;\n  }\n\n\nnextMonth = () => {\n  this.setState({\n      currentMonth: addMonths(this.state.currentMonth, 1)\n  })\n}\n\nprevMonth = () => {\n  this.setState({currentMonth: subMonths(this.state.currentMonth, 1)})\n}\n\n\n  render() {\n    return (\n\n        <Query query={ALL_EVENTS_QUERY}>\n          { ({data, error, loading}) => {\n            console.log(data)\n            if (loading) return <p>Loading...</p>\n            if (error) return <p>Error: {error.message}</p>\n            return (\n              <StyledCal>\n                <p>I found {data.events.length} items</p>\n                <div className=\"calendar\">\n                  {this.renderHeader()}\n                  {this.renderDays()}\n                  {this.renderCells()}\n                </div>\n              </StyledCal>\n            )\n          }}\n        </Query>\n\n    );\n  }\n}\n\nexport default Calendar;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAIA;;;;AA5HA;AACA;AA8HA;;;;A","sourceRoot":""}