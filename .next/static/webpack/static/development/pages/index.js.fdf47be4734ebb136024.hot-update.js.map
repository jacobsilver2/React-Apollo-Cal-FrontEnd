{"version":3,"file":"static/webpack/static/development/pages/index.js.fdf47be4734ebb136024.hot-update.js","sources":["webpack:///./components/QuickUpdate.js","webpack:///./components/styles/QuickUpdateFormStyles.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport { adopt } from 'react-adopt';\nimport { format, differenceInMinutes, addMinutes } from 'date-fns';\nimport QuickUpdateStyled from './styles/QuickUpdateStyles';\nimport Closebutton from './styles/CloseButton';\nimport Error from './ErrorMessage';\nimport { Portal } from './Portal'\nimport OverlayStyled from './styles/OverlayStyled';\nimport Form from './styles/QuickUpdateFormStyles';\nimport Button from './styles/DeleteButtonStyles';\nimport * as mutations from './globals/mutations/mutations';\nimport * as queries from './globals/queries/queries';\nimport * as updateEventMethods from './globals/functions/updateEventMethods';\nimport { possibleStatus } from '../lib/possibleStatus';\n\nconst Composed = adopt({\n  allActs: ({ render }) => <Query query={queries.ALL_ACTS_QUERY}>{render}</Query>,\n  updateEventMutation: ({ updates, render }) => <Mutation mutation={mutations.UPDATE_EVENT_MUTATION} variables={updates} refetchQueries={[{ query: queries.ALL_EVENTS_QUERY}]}>{render}</Mutation>,\n  toggleModalMutation: ({ render }) => <Mutation mutation={mutations.TOGGLE_MODAL_MUTATION}>{render}</Mutation>\n});\n\n\nclass QuickUpdate extends Component {\n  state = {}\n\n  handleChange = (e) => {\n    const { name, type, value } = e.target;\n\n    switch (name) {\n      case 'status':\n        return this.setState({ status: value });\n      case 'select-existing-act':\n        return this.setState({ actId: value, name: '', email: '', description: '', image: '', largeImage: '' });\n      case 'duration':\n        let val = parseFloat(value);\n        debugger;\n        return this.setState({ duration: val, end: addMinutes(!!this.state.start ? this.state.start : this.props.start, val) });\n      case 'draw':\n        val = parseFloat(value);\n        return this.setState({ [name]: value });\n      case 'notes':\n        const notes = [...this.state.notes];\n        const selectedIndex = parseInt(e.target.dataset.key);\n        notes[selectedIndex] = value;\n        return this.setState({ notes });\n    };\n    switch (type) {\n      case 'date':\n        const time = format(this.state.start, \"H:MM\", { awareOfUnicodeTokens: true });\n        let startDateTime = new Date(`${value} ${time}`);\n        const title = format(value, \"YYYY-MM-dd\", { awareOfUnicodeTokens: true });\n        let end = addMinutes(startDateTime, !!this.state.duration ? this.state.duration : this.props.duration);\n        this.setState({ start: startDateTime, title, end });\n        break;\n      case 'time':\n        const date = format(!!this.state.start ? this.state.start : this.props.start, \"YYYY-MM-dd\", { awareOfUnicodeTokens: true });\n        startDateTime = new Date(`${date} ${value}`);\n        end = addMinutes(startDateTime, !!this.state.duration ? this.state.duration : this.props.duration);\n        this.setState({ start: startDateTime, end });\n        break;\n      case 'checkbox':\n        this.setState({ allDay: !!this.state.allDay ? !this.state.allDay : !this.props.allDay})\n        break;\n      default:\n        this.setState({ [name]: value});\n    }\n  }\n\n  addNoteField = (e, notes) => {\n    e.preventDefault();\n    if (notes){\n      const notesCopy = [...notes];\n      notesCopy.push('')\n      return this.setState({notes: notesCopy});\n    }\n    const notesCopy = [...this.state.notes];\n    notesCopy.push('');\n    return this.setState({ notes: notesCopy });\n  }\n\n  handleDeleteNote = (e, index, notes) => {\n    e.preventDefault();\n    if (notes){\n      const notesCopy = [...notes];\n      const notesFiltered = notesCopy.filter((note, i) => i !== index );\n      return this.setState({notes: notesFiltered});\n    }\n    const notesCopy = [...this.state.notes];\n    const notesFiltered = notesCopy.filter((note, i) => i != index );\n    return this.setState({notes: notesFiltered});    \n  }\n\n\n  uploadFile = async (e) => {\n    const files = e.target.files;  \n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'react-apollo-cal');\n    const res = await fetch('https://api.cloudinary.com/v1_1/dlskxwzm6/image/upload', {\n      method: 'POST',\n      body: data\n    });\n    const file = await res.json();\n    this.setState({\n      image: file.secure_url,\n      largeImage: file.eager[0].secure_url\n    })\n  }\n\n  updateEvent = async (e, updateEventMutation, closeModal) => {\n    e.preventDefault();\n    const res = await updateEventMutation({\n      variables: {\n        id: this.props.event.id,\n        ...this.state,\n      },\n    });\n    //run close modal mutation\n    await closeModal();\n  }\n\n\n  render() {\n    return (\n      <Composed singleEventId={this.props.id} updateCache={updateEventMethods.updateCache}>\n        {({ allActs, updateEventMutation, toggleModalMutation }) => {\n          const { event } = this.props;\n          const formattedDate = format(event.start, \"YYYY-MM-dd\", { awareOfUnicodeTokens: true });\n          const formattedTime = format(event.start, \"HH:mm\", { awareOfUnicodeTokens: true });\n          let notes = null;\n          if (this.state.notes) {\n            notes = this.state.notes.map((note, index) => <div key={index}><textarea id=\"notes\" data-key={index} name=\"notes\" placeholder=\"Enter A Note\" value={note} onChange={this.handleChange} /><Button onClick={(e) => this.handleDeleteNote(e, index)}>-</Button></div>)\n          } else if (event.notes.length > 0) {\n            notes = event.notes.map((note, index) => <div key={index}><textarea id=\"notes\" data-key={index} name=\"notes\" placeholder=\"Enter A Note\" value={note} onChange={this.handleChange} disabled /> <Button onClick={(e) => this.handleDeleteNote(e, index, event.notes)}>-</Button></div>)\n          }\n          const acts = allActs.data.acts ? allActs.data.acts.map(act => <option key={act.id} value={act.id}>{act.name}</option>) : null;\n          return (\n            <Portal selector='#modal'>\n              <OverlayStyled>\n                <QuickUpdateStyled>\n                  <Closebutton onClick={toggleModalMutation}>X</Closebutton>\n                  <Error error={updateEventMutation.error} />\n                  <Form onSubmit={e => this.updateEvent(e, updateEventMutation, toggleModalMutation)} >\n                    <fieldset disabled={updateEventMutation.loading} aria-busy={updateEventMutation.loading}>\n                    <h3>Edit Event</h3>\n                      <label htmlFor=\"date\">\n                        Date\n                            <input type=\"date\" id=\"date\" name=\"date\" placeholder=\"Date\" required defaultValue={formattedDate} onChange={this.handleChange} />\n                      </label>\n\n                      <label htmlFor=\"time\">\n                        Time\n                            <input type=\"time\" id=\"time\" name=\"time\" placeholder=\"Date\" required defaultValue={formattedTime} onChange={this.handleChange} />\n                      </label>\n\n                      <label htmlFor=\"duration\">\n                        Duration (minutes)\n                            <input type=\"number\" id=\"duration\" name=\"duration\" defaultValue={differenceInMinutes(event.end, event.start)} onChange={this.handleChange} />\n                      </label>\n\n                      <label htmlFor=\"status\">\n                        Status\n                            <select name=\"status\" defaultValue={event.status} onChange={this.handleChange}>\n                          {possibleStatus.map(status => <option key={status} value={status}>{status}</option>)}\n                        </select>\n                      </label>\n\n                      <label htmlFor=\"allDay\">\n                        All Day\n                            <input type=\"checkbox\" id=\"allday\" name=\"allDay\" defaultChecked={event.allDay} onChange={this.handleChange} />\n                      </label>\n\n                      <label htmlFor=\"draw\">\n                        Draw\n                            <input type=\"number\" id=\"draw\" name=\"draw\" placeholder={event.draw || 0} onChange={this.handleChange} />\n                      </label>\n                      \n                      <label htmlFor=\"notes\">\n                        Notes\n                            {notes}\n                        <Button onClick={(e) => this.addNoteField(e, this.state.notes ? null : event.notes)}>&#43;</Button>\n                      </label>\n\n                    </fieldset>\n\n                    <fieldset>\n                    <h3>Edit Act</h3>\n                    <h6>note: this will alter every event this act is associated with</h6>\n                      <label htmlFor=\"name\">\n                        Act Name\n                          <textarea id=\"name\" name=\"name\" placeholder=\"Act Name\" defaultValue={event.act.name} onChange={this.handleChange} />\n                      </label>\n                      <label htmlFor=\"description\">\n                        Blurb\n                          <textarea id=\"description\" name=\"description\" placeholder=\"Blurb\"  defaultValue={event.act.description} onChange={this.handleChange} />\n                      </label>\n\n                      <label htmlFor=\"email\">\n                        Email\n                          <textarea id=\"email\" name=\"email\" placeholder=\"contact email\"  defaultValue={event.act.email} onChange={this.handleChange} />\n                      </label>\n\n                      <label htmlFor=\"image\">\n                        Picture\n                          <input type=\"file\" id=\"file\" name=\"file\" placeholder=\"Upload an image\" onChange={this.uploadFile} />\n                        {/* {this.renderPreview(event.act.image)} */}\n                        <img src={this.state.image ? this.state.image : event.act.image} alt=\"Image Preview\" width=\"200\"/>\n                      </label>\n                      <hr />\n                    </fieldset>\n\n                    <fieldset>\n                      <h3>Change To A Different Act</h3>\n                      <h6>...currently not working</h6>\n                      <select defaultValue=\"\" onChange={this.handleChange}>\n                        <option value=\"\" disabled>Acts</option>\n                        { acts }\n                      </select>\n                    </fieldset>\n\n                    <fieldset>\n                      <h3>Create A New Act</h3>\n                      <h6>...work in progress</h6>\n                      <button type=\"submit\">Sav{updateEventMutation.loading ? 'ing' : 'e'} Changes</button>\n                    </fieldset>\n                  </Form>\n                </QuickUpdateStyled>\n              </OverlayStyled>\n            </Portal>\n          )\n        }}\n      </Composed>\n    );\n  }\n}\n\nexport default QuickUpdate;\n\n","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05);\n  background: rgba(0, 0, 0, 0.02);\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.5rem;\n  line-height: 1.5;\n  font-weight: 600;\n  label {\n    display: block;\n    margin-bottom: 1rem;\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 0.5rem;\n    font-size: 1rem;\n    border: 1px solid black;\n    &:focus {\n      outline: 0;\n      border-color: ${props => props.theme.mainColor};\n    }\n  }\n  input[type='submit'] {\n    width: auto;\n    background: ${props => props.theme.mainColor};\n    color: white;\n    border: 0;\n    font-size: 2rem;\n    font-weight: 600;\n    padding: 0.5rem 1.0rem;\n  }\n  fieldset {\n    border: 0;\n    padding: 0;\n\n    &[disabled] {\n      opacity: 0.5;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%);\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n\n\n\n\n`;\n\nexport default Form;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAMA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAhBA;AACA;AAgBA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AAKA;AALA;AAAA;AACA;AADA;AASA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAenNA;AACA;AAqNA;;;;;;;;;;;;;;;AC7OA;AAAA;AAAA;AAEA;AAYA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAKA;AAAA;AA+BA;;;;A","sourceRoot":""}