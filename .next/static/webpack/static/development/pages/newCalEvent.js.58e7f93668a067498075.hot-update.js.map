{"version":3,"file":"static/webpack/static/development/pages/newCalEvent.js.58e7f93668a067498075.hot-update.js","sources":["webpack:///./components/CreateEvent.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport { ALL_EVENTS_QUERY } from './Calendar'; \nimport { CREATE_ACT_MUTATION } from './NewAct';\n\nconst CREATE_EVENT_MUTATION = gql`\n  mutation CREATE_EVENT_MUTATION(\n      $date: DateTime!\n      $notes: String\n  ) {\n    createEvent( \n        date: $date\n        notes: $notes\n    ) \n    { id }\n\n  }\n`;\n\n\nclass CreateEvent extends Component {\n  state = {\n      date: '',\n      notes: '',\n      name: '',\n      image: '',\n      largeImage: '',\n      email: '',\n      description: '',\n  }\n\n  update = (cache, payload) => {\n    // manually update the cache on the client, so it matches the server\n\n    // 1. Read the events in the cache\n    const data = cache.readQuery({ query: ALL_EVENTS_QUERY })\n    \n    // 2. Add the new event to the events\n    data.events = data.events.push(payload.data);\n\n    // 3. Put the items back\n    cache.writeQuery( {query: ALL_EVENTS_QUERY, data });\n  }\n\n  handleChange = (e) => {\n    const { name, type, value } = e.target;\n    const val = type === 'number' ? parseFloat(value) : value;\n    this.setState({\n      [name]: val\n    })\n  }\n\n    uploadFile = async (e) => {\n    const files = e.target.files;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'react-apollo-cal');\n    const res = await fetch('https://api.cloudinary.com/v1_1/dlskxwzm6/image/upload', {\n      method: 'POST',\n      body: data\n    });\n    const file = await res.json();\n    this.setState({\n      image: file.secure_url,\n      largeImage: file.eager[0].secure_url\n    })\n  }\n\n  render() {\n    return (\n      <Mutation mutation={CREATE_EVENT_MUTATION} update={this.update} variables={this.state}>\n        {(createEvent, { loading, error, called, data }) => (\n\n          <Form onSubmit={ async (e) => {\n            e.preventDefault();\n            const res = await createEvent();\n            Router.push({\n              pathname: '/'\n            })\n          }}>\n            <Error error={error} />\n\n            <fieldset disabled={loading} aria-busy={loading}>\n              <label htmlFor=\"date\">\n                Date\n                <input type=\"date\" id=\"date\" name=\"date\" placeholder=\"Date\" required value={this.state.date} onChange={this.handleChange}/>\n              </label>\n        \n              <label htmlFor=\"notes\">\n                Notes\n                <textarea id=\"notes\" name=\"notes\" placeholder=\"Enter Some Notes\" required value={this.state.notes} onChange={this.handleChange}/>\n              </label>\n\n              <label htmlFor=\"name\">\n                Name\n                <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" required value={this.state.name} onChange={this.handleChange}/>\n              </label>\n\n              <label htmlFor=\"description\">\n                Description\n                <textarea id=\"description\" name=\"description\" placeholder=\"Enter A Description\" required value={this.state.description} onChange={this.handleChange}/>\n              </label>\n        \n              <label htmlFor=\"email\">\n                Email\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"email\" required value={this.state.email} onChange={this.handleChange}/>\n              </label>\n\n              <label htmlFor=\"file\">\n                Image\n                <input type=\"file\" id=\"file\" name=\"file\" placeholder=\"Upload an image\" onChange={this.uploadFile}/>\n                {this.state.image && <img src={this.state.image} alt=\"Upload Preview\" width=\"200\"/>}\n              </label>\n        \n              <button type=\"submit\">Submit</button>\n            </fieldset>\n          </Form>      \n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport { CREATE_EVENT_MUTATION };\nexport default CreateEvent;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAcA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AAKA;AALA;AAAA;AACA;AADA;AASA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAeiDA;;;;AApGA;AACA;AAsGA;AACA;;;;A","sourceRoot":""}